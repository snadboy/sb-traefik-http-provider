# SB Traefik HTTP Provider - Production Deployment
# This compose file deploys the published Docker image from Docker Hub
#
# Quick Start:
# 1. Copy this file to your deployment directory
# 2. Copy configuration examples and customize them
# 3. Set up your .env file with Cloudflare API token
# 4. Run: docker-compose up -d

services:
  # SB Traefik HTTP Provider Service
  sb-traefik-http-provider:
    image: snadboy/sb-traefik-http-provider:latest
    container_name: sb-traefik-http-provider
    restart: unless-stopped
    ports:
      - "8081:8080"  # HTTP provider endpoint
      - "9090:9090"  # Prometheus metrics (optional)
    volumes:
      # Configuration files (customize these for your setup)
      - ./config/provider-config.yaml:/app/config/provider-config.yaml:ro
      - ./config/ssh-hosts.yaml:/app/config/ssh-hosts.yaml:ro
      - ./config/static-routes.yaml:/app/config/static-routes.yaml:ro  # Optional

      # SSH keys for accessing remote Docker hosts
      - ./ssh-keys:/app/ssh-keys:ro

      # Persistent log storage
      - ./logs:/var/log/sb-traefik-provider
    environment:
      - LOG_LEVEL=INFO
      - LOG_DIR=/var/log/sb-traefik-provider
      - LOG_JSON=false  # Set to true for JSON logging in production
      - PYTHONUNBUFFERED=1
      - WORKERS=2  # Adjust based on your load
    networks:
      - traefik
    labels:
      # Update these domains to match your setup
      - "snadboy.revp.8080.domain=traefik-provider.yourdomain.com"
      - "snadboy.revp.9090.domain=traefik-metrics.yourdomain.com"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Traefik Instance
  traefik:
    image: traefik:v3.2
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"  # Remove in production if not needed
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"

      # HTTP Provider configuration
      - "--providers.http.endpoint=http://sb-traefik-http-provider:8080/api/traefik/config"
      - "--providers.http.pollInterval=30s"

      # Disable Docker provider (we use HTTP provider instead)
      - "--providers.docker=false"

      # Dynamic configuration files
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"

      - "--log.level=INFO"
      - "--ping"

      # Let's Encrypt configuration with Cloudflare DNS challenge
      # UPDATE: Change email to your actual email address
      - "--certificatesresolvers.letsencrypt.acme.email=your-email@example.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"

      # Production Let's Encrypt server
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"

      # For testing, use staging server (uncomment and comment line above):
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard (remove in production if not needed)
    networks:
      - traefik
    depends_on:
      - sb-traefik-http-provider
    env_file:
      - .env  # Must contain CF_DNS_API_TOKEN for Cloudflare DNS challenge
    volumes:
      # Optional: Local Docker socket for mixed local/remote container discovery
      - /var/run/docker.sock:/var/run/docker.sock:ro

      # Dynamic configuration (wildcard certificates, redirects, etc.)
      - ./traefik-dynamic:/etc/traefik/dynamic:ro

      # Let's Encrypt certificate storage
      - ./letsencrypt:/letsencrypt
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  traefik:
    driver: bridge
    name: traefik