services:
  # SB Traefik HTTP Provider Service
  sb-traefik-http-provider:
    image: ghcr.io/snadboy/sb-traefik-http-provider:latest
    container_name: sb-traefik-http-provider
    restart: unless-stopped
    # Docker will use host DNS configuration which includes Tailscale MagicDNS
    ports:
      - "8081:8080"  # Expose provider API
    networks:
      - traefik
    environment:
      - LOG_LEVEL=INFO
      - LOG_DIR=/var/log/sb-traefik-provider
      - LOG_JSON=false  # Set to true for JSON logging
      - PYTHONUNBUFFERED=1
      - WORKERS=1  # Must use 1 worker with event listeners to avoid duplicates
      # DNS Health Check (optional)
      - DNS_HEALTH_CHECK_ENABLED=false  # Set to true to enable
      - DNS_HEALTH_CHECK_NOTIFY=false  # Send notifications on failure
      - DNS_CHECK_NAME=sonarr.isnadboy.com
      - DNS_CHECK_NS_TS=100.65.231.21
      - DNS_CHECK_NS_LAN=192.168.86.76
      # - DNS_CHECK_ADMIN_URL=https://dns.isnadboy.com
      # Home Assistant Notifications (optional)
      # - HA_URL=https://ha.isnadboy.com
      # - HA_TOKEN=your_long_lived_token
      # - HA_NOTIFY_SERVICE=gotify  # or mobile_app_pixel8, etc
      # Gotify Notifications (optional, fallback if HA not configured)
      # - GOTIFY_URL=https://gotify.isnadboy.com/message
      # - GOTIFY_TOKEN=your_app_token
      # - GOTIFY_TITLE=DNS Health Check FAILED
      # - GOTIFY_PRIORITY=5
    labels:
      - "snadboy.revp.8080.domain=sb-traefik-provider-api.isnadboy.com"
      - "snadboy.revp.9090.domain=sb-traefik-provider-metrics.isnadboy.com"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - type: volume
        source: nas-data
        target: /app/config
        read_only: true
        volume:
          subpath: sb-traefik-http-provider/config
      - type: volume
        source: nas-data
        target: /app/logs
        volume:
          subpath: sb-traefik-http-provider/logs

  # Traefik Instance
  traefik:
    image: traefik:v3.2
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.http.endpoint=http://sb-traefik-http-provider:8080/api/traefik/config"
      - "--providers.http.pollInterval=30s"
      - "--providers.docker=false"  # Disable Docker provider since we use HTTP provider
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--log.level=INFO"
      - "--ping"
      # Let's Encrypt configuration with Cloudflare DNS challenge
      - "--certificatesresolvers.letsencrypt.acme.email=dschless@gmail.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      # Uncomment for testing with staging:
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    networks:
      - traefik
    depends_on:
      - sb-traefik-http-provider
    environment:
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN}  # IMPORTANT: Set in .env file or environment
    env_file:
      - .env  # Contains CF_DNS_API_TOKEN
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Optional: for local container discovery
      - type: volume
        source: nas-data
        target: /etc/traefik/dynamic
        volume:
          subpath: traefik/traefik-dynamic
          
      # IMPORTANT: Let's Encrypt storage must be local (not NAS) for permissions
      - letsencrypt-data:/letsencrypt
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  nas-data:
    external: true  # Created by volume-init-compose.yml
  letsencrypt-data:
    driver: local  # Local Docker volume for Let's Encrypt certificates
    # Note: Certificates stored locally, not on NAS, due to ACME permission requirements

networks:
  traefik:
    driver: bridge
    name: traefik